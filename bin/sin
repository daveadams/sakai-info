#!/usr/bin/env ruby
#
# sin
#   Command line tool for exploring the Sakai database via the
#   sakai-info library
#
# Created 2012-02-15 daveadams@gmail.com
# Last updated 2012-10-09 daveadams@gmail.com
#
# https://github.com/daveadams/sakai-info
#
# This software is public domain.
#

require 'sakai-info'
include SakaiInfo

require 'sakai-info/cli'

flags = []
args = []
db_name = nil
logfile = nil

__trace = proc { |event, file, line, id, binding, classname|
  if %w(call raise return).include? event
    t = Time.now
    printf "%s.%06d %-8s %-25s %-10s .%-10s\n", t.strftime("%H:%M:%S"), t.usec, event, File.basename(file) + ":#{line}", classname, id
  end
}

while arg = ARGV.shift
  if arg =~ /^-/
    if arg == "-D"
      db_name = ARGV.shift
    elsif arg =~ /^--database=/
      db_name = arg.split("=")[1]
    elsif arg =~ /^--log(file)?=/
      logfile = arg.split("=")[1]
    elsif arg == "--trace"
      set_trace_func __trace
    else
      flags << arg
    end
  else
    args << arg
  end
end

if args.length < 1
  STDERR.puts "ERROR: No command was given."
  STDERR.puts "Run '#{File.basename($0)} help' for a list of commands."
  exit 1
end

case args[0]
when "help" then
  if not args[1].nil?
    CLI::Help.help args[1]
  else
    CLI::Help.help
  end
  exit

when "version" then
  puts VERSION
  exit

when "test" then
  DB.load_config
  success = 0
  failure = 0
  dbs = nil

  if db_name.nil?
    dbs = DB.databases
  else
    dbs = { db_name => DB.databases[db_name] }
  end

  dbs.each do |nickname, connection_string|
    begin
      print "Trying #{nickname}... "; STDOUT.flush
      db = Sequel.connect(connection_string)
      if db.test_connection
        puts "OK"
        success += 1
      else
        puts "FAIL"
        failure += 1
      end
    rescue => e
      puts "FAIL"
      puts "  #{e}"
      failure += 1
    end
  end

  if failure > 0
    puts "WARNING: Some connections failed"
    exit 1
  else
    puts "OK: All connection tests succeeded"
    exit
  end

when "query" then
  mode = args.shift

when "shell" then
  mode = args.shift

else
  # test to see if it's an accepted lookup mode
  if CLI::LookupModes.keys.include? args[0]
    mode = "lookup"

  elsif CLI::SpecialModes.keys.include? args[0]
    mode = "special"

  else
    STDERR.puts "ERROR: Command '#{args[0]}' was not recognized."
    STDERR.puts "Run '#{File.basename($0)} help' for a list of commands."
    exit 1
  end
end

# set up a logger if specified
logger = nil
if not logfile.nil?
  if logfile == "-"
    logfile = STDOUT
  end
  logger = Logger.new(logfile)
  logger.formatter = proc do |level, timestamp, progname, msg|
    "#{timestamp.strftime("%Y-%m-%d %H:%M:%S")} #{msg}\n"
  end
end
DB.logger = logger

# load database config and set instance to the instance given on the command line
DB.load_config
if not db_name.nil?
  DB.default_database = db_name
end

case mode
when "query"
  CLI::Query.process(args, flags)

when "lookup"
  CLI::Lookup.process(args, flags)

when "special"
  CLI::Special.process(args, flags)

when "shell"
  CLI::Shell.process(args, flags)

end

